#ifndef _XML_PARSER_HPP_
#define _XML_PARSER_HPP_

/** ****************************************************************************
 * @brief Парсер xml файлов, описывающих состояния кодера.
 * @file xml_parser.hpp
 *
 * @todo Нужно указать правила написания туц?
 *
 * @author Петров А.С.
 * ****************************************************************************/

/* --- Подключение заголовочных файлов -------------------------------------- */

// Стандартная библиотека
#include <string> // Строки

// Файлы проекта
#include "coder_descr_iface.hpp" // Абстрактный интерфейс парсера

// Boost
#include <boost/property_tree/ptree.hpp> /// @todo
#include <boost/property_tree/xml_parser.hpp>
#include <boost/foreach.hpp>

namespace nsViterbiCoder
{

/** ****************************************************************************
 * @brief XML парсер..
 * @class cXmlParser
 * ****************************************************************************/
class cXmlParser : public cCoderDescrIface
{



    /* --- Конструкторы/деструкторы ----------------------------------------- */
public:


    /// @todo Исключения...
    /// @todo Смена файла (там сброс флага misFile..)

    /** ************************************************************************
     * @brief Конструктор.
     * @param [in] fileXmlName Путь до файла с xml описанием состоний кодера.
     * ************************************************************************/
    explicit cXmlParser( const std::string &fileXmlName );

    /** ************************************************************************
     * @brief Деструктор.
     * ************************************************************************/
    ~cXmlParser();

    /* --- Реализация интерфейса cCoderDescrIface --------------------------- */
public:
    /// @todo Тут везде исключения.... Надо специфицировать в классе-родителе и тут преобразовывать исключения в свои
    virtual bitCount_t getOutBitCount() override;
    virtual table_t createTable() override;

    /* --- Приватные методы класса ------------------------------------------ */
private:

    /// @todo exeptions...
    bool checkXmlFile();

    /* --- Приватные поля --класса ------------------------------------------ */
private:
    /** ************************************************************************
     * @brief Имя файла с xml-описание кодера.
     * ************************************************************************/
    const std::string &mrFileXml;

    /** ************************************************************************
     * @brief Проводилась ли проверка xml-файла.
     * ************************************************************************/
    bool misFileChecked = false;

    /** ************************************************************************
     * @brief Boost property tree xml парсер.
     * ************************************************************************/
    boost::property_tree::ptree mPropTree;
};



} // nsViterbiCoder

#endif // _XML_PARSER_HPP_
